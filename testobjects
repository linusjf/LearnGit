#!/usr/bin/env bash
require() {
  hash "$@" || exit
}
require git rm find cat
(
  cd ~ || exit
  if [ -e ~/test ]; then
    rm -rf ~/test
  fi
  git init test
  cd test || exit
  find .git/objects
  find .git/objects -type f
  objhash="$(echo 'test content' | git hash-object -w --stdin)"
  echo "$objhash"
  find .git/objects -type f
  git cat-file -p "$objhash"
  git show "$objhash"
  echo 'version 1' >test.txt
  testhash="$(git hash-object -w test.txt)"
  echo "$testhash"
  echo 'version 2' >test.txt
  testv2hash="$(git hash-object -w test.txt)"
  echo "$testv2hash"
  find .git/objects -type f
  rm "test.txt"
  git cat-file -p "$testhash" >test.txt
  cat "test.txt"
  git cat-file -p "$testv2hash" >test.txt
  cat "test.txt"
  git cat-file -t "$testhash"
  git cat-file -t "$testv2hash"
  git update-index --add --cacheinfo 100644 "$testhash" "test.txt"
  treehash="$(git write-tree)"
  git cat-file -p "$treehash"
  git show "$treehash"
  git ls-tree "$treehash"
  git cat-file -t "$treehash"
  echo 'new file' >new.txt
  git update-index --cacheinfo 100644 "$testv2hash" "test.txt"
  git update-index --add "new.txt"
  treehash2="$(git write-tree)"
  git cat-file -p "$treehash2"
  git show "$treehash2"
  git ls-tree "$treehash2"
  git read-tree --prefix=bak "$treehash"
  treehash="$(git write-tree)"
  git cat-file -p "$treehash"
  git show "$treehash"
  git cat-file -p "$treehash" | awk '{ print $3; }' | sort | uniq -c | sort -rn
  git ls-tree "$treehash"
)
